promises
async/await


async/await vs promises? 

states of promises
resolve reject
chaining of promises




JS-1
/*
In this assignment, you will simulate the workflow of a food delivery app that 
has the following tasks:
	- First Concurrent Activities: Fetch menu data from the server and check customer details.
	- Sequential Activities: Prepare the food and package it.
	- Second Concurrent Activities: Assign a delivery person and update the delivery status.

Each task takes different amounts of time, and some tasks can happen concurrently 
while others need to happen sequentially.

Requirements:
=============
Use async/await and promises to model the system.
	Task 1: Fetch menu data from the server should take 2 seconds.
	Task 2: Check customer details should take 1.5 seconds.
	Task 3: Prepare the food should take 3 seconds.
	Task 4: Package the food should take 2 seconds.
	Task 5: Assign a delivery person should take 1 second.
	Task 6: Update the delivery status should take 1.5 second.
Handle any errors that may occur (for example, if the delivery fails).

Hint:
-----
You will need to:
Use Promise.all() for concurrent tasks.
Use await for sequential tasks.

Expected Output:
===============
Starting process for order 123...
Fetching menu data...
Checking details for customer ID: 456...
Menu data fetched.
Details verified for customer ID: 456.
Preparing food for order 123...
Food for order 123 prepared.
Packaging food for order 123...
Food for order 123 packaged.
Assigning a delivery person for order 123...
Updating delivery status for order 123...
Delivery person assigned for order 123.
Delivery status updated for order 123.
Order 123 process completed!
Passed

*/
function fetchMenu() {
  return new Promise((resolve) => {
        //Write your logic here
        console.log(`Fetching menu data...`);
        setTimeout(
            ()=>{
                resolve(`Menu data fetched.`);
            }
        ,2000);
        
  });
}

function checkCustomerDetails(customerId) {
  return new Promise((resolve) => {
    
    //Write your logic here
    console.log(`Checking details for customer ID: ${customerId}...`);
      setTimeout(
            ()=>{
                resolve(`Details verified for customer ID: ${customerId}.`);
            }
        ,1500);
    
  });
}

function prepareFood(orderId) {
  return new Promise((resolve) => {
    
    //Write your logic here
      console.log(`Preparing food for order ${orderId}...`);
      
      setTimeout(
            ()=>{
                resolve(`Food for order ${orderId} prepared.`);
            }
        ,3000);
    
  });
}

function packageFood(orderId) {
  return new Promise((resolve) => {
    
    //Write your logic here
     console.log(`Packaging food for order ${orderId}...`);
      
      setTimeout(
            ()=>{
                resolve(`Food for order ${orderId} packaged.`);
            }
        ,2000);
        
    
  });
}

function assignDeliveryPerson(orderId) {
  return new Promise((resolve) => {
    
    //Write your logic here
      console.log(`Assigning a delivery person for order ${orderId}...`);
      
      setTimeout(
            ()=>{
                resolve(`Delivery person assigned for order ${orderId}.`);
            }
        ,1000);
    
    
  });
}

function updateDeliveryStatus(orderId) {
  return new Promise((resolve) => {
    console.log(`Updating delivery status for order ${orderId}...`);
    setTimeout(() => {
      resolve(`Delivery status updated for order ${orderId}.`);
    }, 1500); // Simulates a 1.5-second delay
  });
}

// implement this function to call the above functions in a correct order.
async function processOrder(orderId, customerId) {
  console.log(`Starting process for order ${orderId}...`);

  // Properly Concurrent Activities 1: Fetch menu and check customer details
  const [menuFetched, customerVerified] = await Promise.all([
    fetchMenu(),
    checkCustomerDetails(customerId),
  ]);
  console.log(menuFetched);
  console.log(customerVerified);

  // Sequential Activities: Prepare and package food
  const foodPrepared = await prepareFood(orderId);
  console.log(foodPrepared);

  const foodPackaged = await packageFood(orderId);
  console.log(foodPackaged);

  // Properly Concurrent Activities 2: Assign delivery person and update status
  const [deliveryAssigned, statusUpdated] = await Promise.all([
    assignDeliveryPerson(orderId),
    updateDeliveryStatus(orderId),
  ]);
  console.log(deliveryAssigned);
  console.log(statusUpdated);

  console.log(`Order ${orderId} process completed!`);
}

async function solution() { 
const startTime = Date.now();
// Test the process
await processOrder(123, 456);
const endTime = Date.now();
// Calculate the elapsed time
const elapsedTime = endTime - startTime;
	if(elapsedTime<=9000){
		console.log(`Passed`);
	}
	else {
		console.log(`Failed`);
	}
}

solution();








JS_2


/*
In this assignment, you will simulate the workflow of a movie booking app that 
has the following tasks:
	First Concurrent Activities:
		- Fetch available movies from the server.
		- Check user details (e.g., whether they are logged in or not).

	Sequential Activities:
		- Choose a movie to book.
		- Select showtime for the movie.
		- Make payment for the booking.
		
	Second Concurrent Activities:
		- Send confirmation email
		- Send confirmation SMS

Each task takes different amounts of time, and some tasks can happen concurrently 
while others need to happen sequentially.

Requirements:
=============
Use async/await and promises to model the system.
	Task 1: Fetch available movies from the server should take 2 seconds.
	Task 2: Check user details should take 1.5 seconds.
	Task 3: Choose a movie to book should take 1 second.
	Task 4: Select showtime for the movie should take 1.5 seconds.
	Task 5: Make payment for the booking should take 2 seconds.
	Task 6: Send confirmation email should take 1.5 seconds.
	Task 7: Send confirmation SMS should take 1 second.
Handle any errors that may occur (for example, if the booking fails).

Hint:
-----
You will need to:
Use Promise.all() for concurrent tasks.
Use await for sequential tasks.

Expected Output:
===============
Starting booking process for user ID 101...
Fetching available movies...
Checking user details for user ID: 101...
User ID 101 verified.
Choosing a movie...
Movie chosen: Movie A
Selecting showtime for Movie A...
Showtime for Movie A selected.
Making payment...
Payment successful.
Sending email confirmation...
Sending SMS confirmation...
Email confirmation sent.
SMS confirmation sent.
Booking process completed for user 101.
Booking Successful

*/

// fix the bug in this method
function fetchAvailableMovies() {
  return new Promise((resolve) => {
    console.log("Fetching available movies...");
    setTimeout(() => {
      resolve(["Movie A", "Movie B", "Movie C", "Movie D"]);
    }, 2); // Simulate 2 seconds delay
  });
}

function checkUserDetails(userId) {
  return new Promise((resolve) => {
    
    // Write your logic here
    console.log(`Checking user details for user ID: ${userId}...`);
    setTimeout(
        ()=>{
            resolve(`User ID ${userId} verified.`);
        }
        ,1500);
    
  });
}

function chooseMovie(movieList) {
  return new Promise((resolve) => {
    
    // Write your logic here ( choose Movie A )
    console.log('Choosing a movie...');
    setTimeout(
        ()=>{
        console.log(`Movie chosen: Movie A`);
        resolve(`Movie A`);
    }
        ,1000);
        
  });
}


function selectShowtime(movie) {
  return new Promise((resolve) => {
   
    // Write your logic here
    console.log(`Selecting showtime for ${movie}...`);
      setTimeout(() => {
    resolve(`Showtime for ${movie} selected.`);
      }, 1500);
  });
}

function makePayment() {
  return new Promise((resolve) => {
   
    // Write your logic here (e.g.,refer sample output)
    console.log(`Making payment...`);
setTimeout(() => {resolve(`Payment successful.`);}, 2000);
  });
}

function sendEmailConfirmation() {
  return new Promise((resolve) => {
    
    // Write your logic here
    

console.log(`Sending email confirmation...`);
      setTimeout(() => {
        resolve(`Email confirmation sent.`);
      }, 1500);

  });
}

function sendSMSConfirmation() {
  return new Promise((resolve) => {
    
    // Write your logic here
    

    console.log(`Sending SMS confirmation...`);
      setTimeout(() => {
        resolve(`SMS confirmation sent.`);
      }, 1500);

  });
}

// Main function to process the movie booking
async function processBooking(userId) {
  console.log(`Starting booking process for user ID ${userId}...`);
  
  // Write your logic here in the following order.
        const [movies, userDetails] = await Promise.all([
        fetchAvailableMovies(),
        checkUserDetails(userId)
        ]);
        
       console.log(userDetails);
  // First Concurrent Activities: Fetch available movies and check user details
  
     const movie = await chooseMovie(movies);
    
      const showtime = await selectShowtime(movie);
      console.log(showtime);
      
      const payment = await makePayment();
      console.log(payment);

 
  // Sequential Activities: Choose movie and select showtime
     const [email, sms] = await Promise.all([
        sendEmailConfirmation(),
        sendSMSConfirmation()
        ]);
        
       console.log(email);
       console.log(sms);
      
  // Concurrent Activities: Send email and SMS confirmations

  console.log(`Booking process completed for user ${userId}.`);
}


async function solution() { 
const startTime = Date.now();
// Test the process for a specific user
await processBooking(101);
const endTime = Date.now();
// Calculate the elapsed time
const elapsedTime = endTime - startTime;
	if(elapsedTime>=4000 && elapsedTime<=9000){
		console.log(`Booking Successful`);
	}
	else {
		console.log(`Booking Failure`);
	}
}

solution();
